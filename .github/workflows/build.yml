name: Build, deploy, check for new commits

on:
  workflow_dispatch:
    inputs:
      check-for-updates:
        description: 'Check for new commits in tested repos before building [true|false] (default=false)'
        required: false
        default: false
      debug-artifacts:
        description: 'Upload artifacts useful for debugging [true|false] (default=false)'
        required: false
        default: false
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
      - cron: '0 */24 * * *'

jobs:
  check-for-updates:
    if: >-
      ( github.event_name == 'schedule'
        || github.event.inputs.check-for-updates)
      && github.ref == 'refs/heads/master'
    outputs:
      updated: ${{ steps.check.outputs.revs-changed }}
      revision: ${{ steps.update.outputs.revision }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for new commits in tested repositories
        id: check
        run: |
            ./update-deps.sh
            if ! git diff -w --quiet; then
                echo '::set-output name=revs-changed::true'
            fi

      - name: Update revisions
        id: update
        if: steps.check.outputs.revs-changed
        run: |
            git config --global user.name 'github-actions[bot]'
            git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
            git commit -a -F ${{ steps.check.outputs.commit-msg }}
            git push origin master
            echo '::set-output name=revision::'$(git rev-parse HEAD)

  build:
    needs: check-for-updates
    if: >-
      ( always() && github.event_name != 'schedule' )
      || needs.check-for-updates.outputs.updated
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.check-for-updates.outputs.revision || github.sha }}
          persist-credentials: false

      - name: Update commit status (pending)
        # Status is set automatically for all commits except those created with GH Action
        if: needs.check-for-updates.outputs.updated
        run: ./set-status ${{ secrets.GITHUB_TOKEN }} $(git rev-parse HEAD) pending

      - name: Install dependencies
        run: |
          sudo apt install curl gnupg
          curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
          sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
          echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
          sudo apt update
          sudo apt install bazel-3.4.1 asciidoc graphviz source-highlight

      - name: Fetch
        run: ./fetch.sh

      - name: Build
        run: ./build.sh

      - name: Update commit status to build result
        if: always() && needs.check-for-updates.outputs.updated
        run: ./set-status ${{ secrets.GITHUB_TOKEN }} $(git rev-parse HEAD) ${{ job.status }}

      # Required to preserve file permissions
      - name: Create .tar archive with artifacts
        run: tar -cf ../server-files.tar *
        working-directory: _build/output/artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: server-files
          path: _build/output/server-files.tar

      - name: Upload debug artifacts
        if: always() && github.event.inputs.debug-artifacts
        uses: actions/upload-artifact@v2
        with:
          name: debug-files
          path: |
            _build/output/entries
            _build/ibex/file_list.*.txt

  deploy:
    needs: build
    if: github.ref == 'refs/heads/master'

    runs-on: ubuntu-20.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: server-files

      - name: Extract artifacts .tar archive
        run: |
          mkdir artifacts
          tar -xf server-files.tar -C artifacts

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "$ssh_key" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          ssh_key: ${{ secrets.SSH_KEY }}

      - name: Deploy
        run: rsync -avrz --delete -e "ssh -o StrictHostKeyChecking=no" * "indexer@34.123.203.237:~/indexer"
        working-directory: artifacts

